# gemini 프롬프트
웹프론트 개발환경을 구성할거야. 리액트를 이용하고 컴포넌트와 화면은 분리해서 작업하려고 해. jsx 파일로 화면을 만들거고 서버호출은 별도의 js 파일로 만들거야

# 프로젝트 생성 : my-react-app 폴더 생성
npm create vite@latest my-react-app -- --template react

# 프로젝트 폴더로 이동 및 필수 패키지 설치
cd my-react-app
npm install

# 실행
npm run dev

# 서버 호출 파일 (src/api/apiService.js)
# 재사용 가능한 컴포넌트 (src/components/Button.jsx)
# 화면 컴포넌트 (src/pages/HomePage.jsx)
# 메인 앱 파일 (src/App.jsx)
# 앱 시작 파일 (src/main.jsx)

# Tailwind CSS 설치 (Install Tailwind CSS)
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

# Tailwind CSS 설정 (Tailwind CSS Setup)
tailwind.config.js 설정 (Configure tailwind.config.js)
index.css에 Tailwind 지시어 추가 (Add Tailwind Directives to index.css)

# 서버용 gemini 프롬프트
지난번에 리액트로 프론트 개발환경을 만들었는데, 이번에는 자바스프링프래임워크로 서버를 구현하려고 해

# 서버환경
Java Development Kit (JDK) 17 이상 설치 (JDK 17+ Installation)
Eclipse (STS) 설치 (Eclipse (STS) Installation)

# 프로젝트 생성
Eclipse (STS) 실행 -> 상단 메뉴에서 File > New > Spring Starter Project를 클릭
-> Name:: Project name (e.g., my-spring-backend)
   Type:: Select build tool (typically choose either Maven or Gradle; here, I'll explain based on Maven.)
   Group:: Group ID (e.g., com.molo.backend)
   Artifact:: Artifact ID (similar to project name, e.g., my-spring-backend)
   Package:: Base package (e.g., com.molo.backend.myspringbackend)
   Java Version:: 17 or higher (select according to your installed JDK version)
   Packaging:: Jar (to run the web application as a single file)
   Language:: Java
   Next를 클릭
-> 의존성(Dependencies) 추가 : Available 목록에서 다음을 검색하고 추가
   Spring Web: 웹 애플리케이션(REST API)을 만들고 실행하는 데 필요한 핵심 라이브러리
   Lombok: 코드를 더 간결하게 작성할 수 있도록 도와주는 유용한 라이브러리 (예: getter, setter 자동 생성).
   (Optional) Spring Data JPA: 데이터베이스와 연동할 경우 필요
   (Optional) H2 Database: 가볍고 내장된 데이터베이스로, 개발 및 테스트용으로 편리
   (Optional) Spring Security: 보안 기능을 추가
   Finish를 클릭
-> 프로젝트 생성이 완료되면 Eclipse는 Maven (또는 Gradle) 빌드를 실행하고 필요한 모든 라이브러리를 다운로드
-> 프로젝트 구조 및 주요 파일 (Project Structure and Key Files)
   1. src/main/java:
   com.molo.backend.myspringbackend (기본 패키지)
   MySpringBackendApplication.java: 이 파일은 Spring Boot 애플리케이션의 시작점입니다. @SpringBootApplication 어노테이션이 붙어 있으며, main 메서드를 포함
   2. src/main/resources:
   application.properties (또는 application.yml): Spring Boot 애플리케이션의 설정 파일. 서버 포트, 데이터베이스 연결 정보 등을 여기에 설정
   static/: 정적 파일(HTML, CSS, JavaScript, 이미지)을 저장하는 폴더 (프론트엔드가 따로 있으므로 여기서는 주로 사용하지 않음)
   templates/: Thymeleaf, JSP 등 서버 사이드 템플릿 파일을 저장하는 폴더 (REST API에서는 주로 사용하지 않음)
   3. pom.xml (Maven 프로젝트의 경우):
   프로젝트의 빌드 설정 파일. 선택한 의존성(라이브러리) 목록이 여기에 포함
-> 간단한 REST API 엔드포인트 구현 (Implementing a Simple REST API Endpoint)
   1. 컨트롤러 클래스 생성 (Create Controller Class)
   src/main/java 아래의 기본 패키지(com.molo.backend.myspringbackend)를 마우스 오른쪽 버튼으로 클릭
   New > Class를 선택
   Name:에 HelloController라고 입력하고 Finish를 클릭
   2. HelloController.java 코드 작성 (Write HelloController.java Code)
-> Spring Boot 애플리케이션 실행 및 테스트 (Running and Testing Spring Boot Application)
   1. Project Explorer에서 MySpringBackendApplication.java 파일을 마우스 오른쪽 버튼으로 클릭
   Run As > Spring Boot App을 선택
   2. 콘솔 뷰(Console view)에 Spring Boot가 시작되는 로그 표시. 기본적으로 내장된 Tomcat 서버가 8080 포트에서 실행
   API 엔드포인트 테스트 (Test API Endpoint):
   웹 브라우저를 열고 다음 주소로 접속 : http://localhost:8080/api/hello

# Eclipse에서 VS Code로 개발 환경 변경하기 (Switching Development Environment from Eclipse to VS Code)
VS Code를 열고 왼쪽 사이드바의 '확장 프로그램' 아이콘(네모 4개 모양)을 클릭
-> 확장 프로그램들을 검색하여 설치
   Extension Pack for Java , Spring Boot Extension Pack , Lombok
-> 실행 : mvn spring-boot:run
